[{"path":"https://dschafer.github.io/activatr/articles/activatr.html","id":"getting-gpx-files","dir":"Articles","previous_headings":"","what":"Getting GPX Files","title":"Visualizing Activities with activatr","text":"process get GPX file varies depending service use. Garmin Connect, can click gear menu activity click “Export GPX”. package includes sample GPXs Garmin Forerunner 935 example files vignette.","code":""},{"path":"https://dschafer.github.io/activatr/articles/activatr.html","id":"parsing-gpx-files","dir":"Articles","previous_headings":"","what":"Parsing GPX Files","title":"Visualizing Activities with activatr","text":"Basic parsing GPX file simple: use parse_gpx function pass name GPX file. default configuration, parse_gpx create row every GPS point file, pull latitude (lat), longitude (lon), elevation (ele, meters), time (time) tibble: can also get summary activity:","code":"library(activatr)  # Get the running_example.gpx file included with this package. filename <- system.file(   \"extdata\",   \"running_example.gpx.gz\",   package = \"activatr\" )  df <- parse_gpx(filename) summary(df)"},{"path":"https://dschafer.github.io/activatr/articles/activatr.html","id":"visualizing","dir":"Articles","previous_headings":"","what":"Visualizing","title":"Visualizing Activities with activatr","text":"data, ’s useful visualize . basic visualizations work expected data frame:  ’s helpful overlay information correctly-sized map. aid , get_map_from_df gives us ggmap object (ggmap package), can use visualize track. Let’s see start:  axes show now ggmap right size visualize run. putting together, can make nice basic graphic run:","code":"library(ggplot2) qplot(lon, lat, data = df) ggmap::ggmap(get_ggmap_from_df(df)) + theme_void() ggmap::ggmap(get_ggmap_from_df(df)) +   theme_void() +   geom_path(aes(x = lon, y = lat), size = 1, data = df, color = \"red\") #> Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0. #> ℹ Please use `linewidth` instead. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated."},{"path":"https://dschafer.github.io/activatr/articles/parsing.html","id":"parsing-extension-data","dir":"Articles","previous_headings":"","what":"Parsing extension data","title":"Advanced Parsing with activatr","text":"GPX file contains additional extension information, activatr can parse well. case, running_example.gpx contains heart rate, cadence, temperature information. can parse setting detail = \"advanced\" parse_gpx: Now can plots like heart rate time, distribution cadences:","code":"df_advanced <- parse_gpx(filename, detail = \"advanced\") library(ggplot2) library(dplyr) ggplot(df_advanced) +   geom_line(aes(x = time, y = hr), color = \"red\") ggplot(filter(df_advanced, cad > 80)) +   geom_density(aes(x = cad * 2), fill = \"blue\", bw = 1)"},{"path":"https://dschafer.github.io/activatr/articles/parsing.html","id":"sampling-datapoints","dir":"Articles","previous_headings":"","what":"Sampling datapoints","title":"Advanced Parsing with activatr","text":"’re parsing many GPX files GPX files sampled every second, often don’t need “full resolution” view activity. every argument parse_gpx allows sample points GPX, speeding parsing:","code":"# Parsing as normal gets all of the rows, but takes longer full_time <- system.time({   df_full <- parse_gpx(filename) }) nrow(df_full) #> [1] 4433 full_time #>    user  system elapsed  #>   0.297   0.000   0.298  # Grabbing every hundredth data point runs much faster sample_time <- system.time({   df_sample <- parse_gpx(filename, every = 100) }) nrow(df_sample) #> [1] 44 sample_time #>    user  system elapsed  #>   0.053   0.000   0.053"},{"path":"https://dschafer.github.io/activatr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Daniel Schafer. Author, copyright holder, maintainer.","code":""},{"path":"https://dschafer.github.io/activatr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Schafer D (2023). activatr: Utilities Parsing Plotting Activities. https://github.com/dschafer/activatr, https://dschafer.github.io/activatr/.","code":"@Manual{,   title = {activatr: Utilities for Parsing and Plotting Activities},   author = {Daniel Schafer},   year = {2023},   note = {https://github.com/dschafer/activatr, https://dschafer.github.io/activatr/}, }"},{"path":"https://dschafer.github.io/activatr/index.html","id":"activatr","dir":"","previous_headings":"","what":"Utilities for Parsing and Plotting Activities","title":"Utilities for Parsing and Plotting Activities","text":"activatr (pronounced like word “activator”) library parsing GPX files standard format, manipulating visualizing files.","code":""},{"path":"https://dschafer.github.io/activatr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Utilities for Parsing and Plotting Activities","text":"can install released version activatr CRAN : development version GitHub :","code":"install.packages(\"activatr\") # install.packages(\"devtools\") devtools::install_github(\"dschafer/activatr\")"},{"path":"https://dschafer.github.io/activatr/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Utilities for Parsing and Plotting Activities","text":"Basic parsing GPX file simple: use parse_gpx function pass name GPX file. default configuration, parse_gpx create row every GPS point file, pull latitude (lat), longitude (lon), elevation (ele, meters), time (time) tibble: can also get summary activity: data, ’s useful visualize . basic visualizations work expected data frame:  ’s helpful overlay information correctly-sized map. aid , get_map_from_df gives us ggmap object (ggmap package), can use visualize track. Let’s see start:  axes show now ggmap right size visualize run. putting together, can make nice basic graphic run:","code":"library(activatr)  # Get the running_example.gpx file included with this package. filename <- system.file(   \"extdata\",   \"running_example.gpx.gz\",   package = \"activatr\" )  df <- parse_gpx(filename) summary(df) library(ggplot2) qplot(lon, lat, data = df) ggmap::ggmap(get_ggmap_from_df(df)) + theme_void() ggmap::ggmap(get_ggmap_from_df(df)) +   theme_void() +   geom_path(aes(x = lon, y = lat), linewidth = 1, data = df, color = \"red\")"},{"path":"https://dschafer.github.io/activatr/reference/act_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates an activatr tibble, abbreviated act_tbl. — act_tbl","title":"Creates an activatr tibble, abbreviated act_tbl. — act_tbl","text":"act_tbl takes tibble returns act_tbl object. summary.act_tbl returns tibble canonical information activity. Designed allow easy creation activity summary data sets mapping summary act_tbl using bind_rows create complete data set.","code":""},{"path":"https://dschafer.github.io/activatr/reference/act_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates an activatr tibble, abbreviated act_tbl. — act_tbl","text":"","code":"act_tbl(x)  # S3 method for act_tbl summary(object, full = FALSE, units = c(\"imperial\", \"metric\"), ...)"},{"path":"https://dschafer.github.io/activatr/reference/act_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates an activatr tibble, abbreviated act_tbl. — act_tbl","text":"x object turn act_tbl. object object summary desired full Whether every column included, filled NA missing. useful ensure tibble shape every file, allowing eventual use bind_rows create full summary data set. units units used? Imperial returns distance miles, pace minutes per mile, elevation feet. Metric returns distance kilometers, pace minutes per kilometer, elevation meters. ... Additional arguments.","code":""},{"path":"https://dschafer.github.io/activatr/reference/act_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates an activatr tibble, abbreviated act_tbl. — act_tbl","text":"act_tbl returns object class \"act_tbl\",         errors provided tibble invalid. summary.act_tbl returns tibble single row,         containing summary given act_tbl.","code":""},{"path":"https://dschafer.github.io/activatr/reference/activatr.html","id":null,"dir":"Reference","previous_headings":"","what":"activatr: Utilities for Parsing and Plotting Activities — activatr","title":"activatr: Utilities for Parsing and Plotting Activities — activatr","text":"contains helpful functions parsing, managing, plotting, visualizing activities, often GPX (GPS Exchange Format) files recorded GPS devices. allows easy parsing source files standard R data formats, along functions compute derived data activity, plot activity variety ways.","code":""},{"path":"https://dschafer.github.io/activatr/reference/get_ggmap_from_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a ggmap object for a given Activatr DF. — get_ggmap_from_df","title":"Get a ggmap object for a given Activatr DF. — get_ggmap_from_df","text":"Note since calls ggmap::get_googlemap, must previously called ggmap::register_google register API key.","code":""},{"path":"https://dschafer.github.io/activatr/reference/get_ggmap_from_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a ggmap object for a given Activatr DF. — get_ggmap_from_df","text":"","code":"get_ggmap_from_df(df, ...)"},{"path":"https://dschafer.github.io/activatr/reference/get_ggmap_from_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a ggmap object for a given Activatr DF. — get_ggmap_from_df","text":"df Activatr DF: tibble parse_gpx parse_tcx. ... Additional arguments pass ggmap::get_googlemap.","code":""},{"path":"https://dschafer.github.io/activatr/reference/get_ggmap_from_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a ggmap object for a given Activatr DF. — get_ggmap_from_df","text":"ggmap object, result calling ggmap::get_googlemap,   correct center size include entire data frame.","code":""},{"path":"https://dschafer.github.io/activatr/reference/localize_to_time_zone.html","id":null,"dir":"Reference","previous_headings":"","what":"Uses Google Maps Time Zone APIs to localize the time zone. — localize_to_time_zone","title":"Uses Google Maps Time Zone APIs to localize the time zone. — localize_to_time_zone","text":"returns mutated Activatr DF time column updated reflect correct time zone, using Google Maps Time Zone APIs.","code":""},{"path":"https://dschafer.github.io/activatr/reference/localize_to_time_zone.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uses Google Maps Time Zone APIs to localize the time zone. — localize_to_time_zone","text":"","code":"localize_to_time_zone(df)"},{"path":"https://dschafer.github.io/activatr/reference/localize_to_time_zone.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uses Google Maps Time Zone APIs to localize the time zone. — localize_to_time_zone","text":"df Activatr DF: tibble parse_gpx parse_tcx.","code":""},{"path":"https://dschafer.github.io/activatr/reference/localize_to_time_zone.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uses Google Maps Time Zone APIs to localize the time zone. — localize_to_time_zone","text":"Activatr DF, time column updated         local time zone rather UTC.","code":""},{"path":"https://dschafer.github.io/activatr/reference/localize_to_time_zone.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Uses Google Maps Time Zone APIs to localize the time zone. — localize_to_time_zone","text":"Note avoid overuse API, \"approximation\", finds correct time zone first point data frame, assumes points data frame use time zone. Runs time zones (runs cross daylight savings time shifts) hence recorded using consistent, always pointwise correct, timezone. Note must previously called ggmap::register_google register API key calling .","code":""},{"path":"https://dschafer.github.io/activatr/reference/mutate_with_distance.html","id":null,"dir":"Reference","previous_headings":"","what":"Augments a Activatr DF with a distance variable. — mutate_with_distance","title":"Augments a Activatr DF with a distance variable. — mutate_with_distance","text":"returns mutated Activatr DF new column representing distance, meters. distance determined looking lat/lon delta current point previous point: hence, always NA first row data frame.","code":""},{"path":"https://dschafer.github.io/activatr/reference/mutate_with_distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Augments a Activatr DF with a distance variable. — mutate_with_distance","text":"","code":"mutate_with_distance(df, method = c(\"2D\", \"3D\"), lead = 0, lag = 1)"},{"path":"https://dschafer.github.io/activatr/reference/mutate_with_distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Augments a Activatr DF with a distance variable. — mutate_with_distance","text":"df Activatr DF: tibble parse_gpx parse_tcx. method 2D (default), ignores elevation. 3D, includes elevation. lead far ahead look \"end\" point lag far behind look \"start\" point","code":""},{"path":"https://dschafer.github.io/activatr/reference/mutate_with_distance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Augments a Activatr DF with a distance variable. — mutate_with_distance","text":"Activatr DF, new distance column,        meters.","code":""},{"path":"https://dschafer.github.io/activatr/reference/mutate_with_speed.html","id":null,"dir":"Reference","previous_headings":"","what":"Augments a Activatr DF with a speed variable. — mutate_with_speed","title":"Augments a Activatr DF with a speed variable. — mutate_with_speed","text":"returns mutated Activatr DF new column representing speed, meters per second. speed determined looking time difference current point previous point: hence, always NA first row data frame.","code":""},{"path":"https://dschafer.github.io/activatr/reference/mutate_with_speed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Augments a Activatr DF with a speed variable. — mutate_with_speed","text":"","code":"mutate_with_speed(df, method = c(\"2D\", \"3D\"), lead = 0, lag = 1)"},{"path":"https://dschafer.github.io/activatr/reference/mutate_with_speed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Augments a Activatr DF with a speed variable. — mutate_with_speed","text":"df Activatr DF: tibble parse_gpx parse_tcx. method 2D (default), ignores elevation. 3D, includes elevation. lead far ahead look \"end\" point lag far behind look \"start\" point","code":""},{"path":"https://dschafer.github.io/activatr/reference/mutate_with_speed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Augments a Activatr DF with a speed variable. — mutate_with_speed","text":"Activatr DF, new speed column, meters         per second.","code":""},{"path":"https://dschafer.github.io/activatr/reference/pace_formatter.html","id":null,"dir":"Reference","previous_headings":"","what":"A formatter that takes a pace duration and returns a formatted M:SS string. — pace_formatter","title":"A formatter that takes a pace duration and returns a formatted M:SS string. — pace_formatter","text":"formatter takes pace duration returns formatted M:SS string.","code":""},{"path":"https://dschafer.github.io/activatr/reference/pace_formatter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A formatter that takes a pace duration and returns a formatted M:SS string. — pace_formatter","text":"","code":"pace_formatter(pace)"},{"path":"https://dschafer.github.io/activatr/reference/pace_formatter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A formatter that takes a pace duration and returns a formatted M:SS string. — pace_formatter","text":"pace lubridate duration.","code":""},{"path":"https://dschafer.github.io/activatr/reference/pace_formatter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A formatter that takes a pace duration and returns a formatted M:SS string. — pace_formatter","text":"formatted string representing pace.","code":""},{"path":"https://dschafer.github.io/activatr/reference/pace_formatter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A formatter that takes a pace duration and returns a formatted M:SS string. — pace_formatter","text":"","code":"pace_formatter(lubridate::dseconds(390)) #> [1] \"6:30\""},{"path":"https://dschafer.github.io/activatr/reference/parse_gpx.html","id":null,"dir":"Reference","previous_headings":"","what":"Parses a GPX file into a tibble. — parse_gpx","title":"Parses a GPX file into a tibble. — parse_gpx","text":"parses standard GPS Exchange Format XML (GPX) file act_tbl.","code":""},{"path":"https://dschafer.github.io/activatr/reference/parse_gpx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parses a GPX file into a tibble. — parse_gpx","text":"","code":"parse_gpx(filename, detail = c(\"basic\", \"latlon\", \"advanced\"), every = NA)"},{"path":"https://dschafer.github.io/activatr/reference/parse_gpx.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parses a GPX file into a tibble. — parse_gpx","text":"filename GPX file parse detail much detail parse GPX. * \"basic\", default, load lat / lon / ele / time. * \"latlon\", load lat/lon: useful GPX files exported without time information. * \"advanced\", load everything basic, plus hr / cad / atemp: useful files HR information. every Optional. provided, determines frequently points sampled file, 10 provided, every tenth point selected. omitted set 1, every point selected. Must positive integer.","code":""},{"path":"https://dschafer.github.io/activatr/reference/parse_gpx.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parses a GPX file into a tibble. — parse_gpx","text":"act_tbl one row trackpoint GPX   (modified every), columns determined  detail. lat latitude, dbl degrees -90 90 lon longitude, dbl degrees -180 180 ele elevation, dbl meters time time, dttm representing time point hr heart rate, int beats per minute cad cadence, int one-foot steps per minute Additionally, attributes set tibble containing top level data  GPX. NA provided file. filename filename parsed . always                     present, always value filename                     argument. time time, dttm representing time GPX title title, chr desc description, chr type type, chr","code":""},{"path":[]},{"path":"https://dschafer.github.io/activatr/reference/parse_gpx.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parses a GPX file into a tibble. — parse_gpx","text":"","code":"running_file <- system.file(   \"extdata\",   \"running_example.gpx.gz\",   package = \"activatr\" ) running_df <- parse_gpx(running_file)"},{"path":"https://dschafer.github.io/activatr/reference/parse_tcx.html","id":null,"dir":"Reference","previous_headings":"","what":"Parses a TCX file into a tibble. — parse_tcx","title":"Parses a TCX file into a tibble. — parse_tcx","text":"parses standard Training Center XML (TCX) file act_tbl.","code":""},{"path":"https://dschafer.github.io/activatr/reference/parse_tcx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parses a TCX file into a tibble. — parse_tcx","text":"","code":"parse_tcx(filename, detail = c(\"basic\", \"latlon\", \"advanced\"), every = NA)"},{"path":"https://dschafer.github.io/activatr/reference/parse_tcx.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parses a TCX file into a tibble. — parse_tcx","text":"filename TCX file parse detail much detail parse TCX. * \"basic\", default, load lat / lon / ele / time. * \"latlon\", load lat/lon: useful TCX files exported without time information. * \"advanced\", load everything basic, plus hr / cad / atemp: useful files HR information. every Optional. provided, determines frequently points sampled file, 10 provided, every tenth point selected. omitted set 1, every point selected. Must positive integer.","code":""},{"path":"https://dschafer.github.io/activatr/reference/parse_tcx.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parses a TCX file into a tibble. — parse_tcx","text":"act_tbl one row trackpoint TCX   (modified every), columns determined  detail. lat latitude, dbl degrees -90 90 lon longitude, dbl degrees -180 180 ele elevation, dbl meters time time, dttm representing time point hr heart rate, int beats per minute cad cadence, int one-foot steps per minute Additionally, attributes set tibble containing top level data  TCX. NA provided file. filename filename parsed . always present                     always value filename argument. time time, dttm representing time TCX type type, chr","code":""},{"path":[]},{"path":"https://dschafer.github.io/activatr/reference/parse_tcx.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parses a TCX file into a tibble. — parse_tcx","text":"","code":"running_file <- system.file(   \"extdata\",   \"running_example.tcx.gz\",   package = \"activatr\" ) running_df <- parse_gpx(running_file)"},{"path":"https://dschafer.github.io/activatr/reference/running_example_ggmap.html","id":null,"dir":"Reference","previous_headings":"","what":"The result of calling get_ggmap_from_df on running_example — running_example_ggmap","title":"The result of calling get_ggmap_from_df on running_example — running_example_ggmap","text":"result running:","code":""},{"path":"https://dschafer.github.io/activatr/reference/running_example_ggmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The result of calling get_ggmap_from_df on running_example — running_example_ggmap","text":"","code":"running_example_ggmap"},{"path":"https://dschafer.github.io/activatr/reference/running_example_ggmap.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"The result of calling get_ggmap_from_df on running_example — running_example_ggmap","text":"object class ggmap (inherits raster) 1280 rows 1280 columns.","code":""},{"path":"https://dschafer.github.io/activatr/reference/running_example_ggmap.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The result of calling get_ggmap_from_df on running_example — running_example_ggmap","text":"``` running_file <- system.file(   \"extdata\",   \"running_example.gpx\",   package = \"activatr\") running_df <- parse_gpx(running_file) running_example_ggmap <- get_ggmap_from_df(running_df) ``` except using vignettes examples hard, get_ggmap_from_df requires api key passed `ggmap`. result running valid API key.","code":""},{"path":"https://dschafer.github.io/activatr/reference/speed_to_mile_pace.html","id":null,"dir":"Reference","previous_headings":"","what":"Converts a speed (in meters per second) to a mile pace — speed_to_mile_pace","title":"Converts a speed (in meters per second) to a mile pace — speed_to_mile_pace","text":"Converts speed (meters per second) mile pace","code":""},{"path":"https://dschafer.github.io/activatr/reference/speed_to_mile_pace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Converts a speed (in meters per second) to a mile pace — speed_to_mile_pace","text":"","code":"speed_to_mile_pace(speed)"},{"path":"https://dschafer.github.io/activatr/reference/speed_to_mile_pace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Converts a speed (in meters per second) to a mile pace — speed_to_mile_pace","text":"speed vector speed values meters per second, mutate_with_speed.","code":""},{"path":"https://dschafer.github.io/activatr/reference/speed_to_mile_pace.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Converts a speed (in meters per second) to a mile pace — speed_to_mile_pace","text":"corresponding vector lubridate durations, representing   mile pace.","code":""},{"path":"https://dschafer.github.io/activatr/reference/speed_to_mile_pace.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Converts a speed (in meters per second) to a mile pace — speed_to_mile_pace","text":"","code":"speed_to_mile_pace(1) #> [1] \"1609.34s (~26.82 minutes)\""},{"path":"https://dschafer.github.io/activatr/news/index.html","id":"activatr-011","dir":"Changelog","previous_headings":"","what":"activatr 0.1.1","title":"activatr 0.1.1","text":"CRAN release: 2023-05-01 Switch dependency timetk slider avoid unnecessary indirection (#3).","code":""},{"path":"https://dschafer.github.io/activatr/news/index.html","id":"activatr-010","dir":"Changelog","previous_headings":"","what":"activatr 0.1.0","title":"activatr 0.1.0","text":"CRAN release: 2021-01-15 Initial release.","code":""}]
